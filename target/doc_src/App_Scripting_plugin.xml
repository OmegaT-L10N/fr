<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../docbook-xml-4.5/docbookx.dtd">
<appendix id="appendix.Scripts.inOmegaT">
  <title>Scripts<indexterm class="singular">
      <primary>Scripts</primary>
    </indexterm></title>

  <section>
    <title>Introduction</title>

    <para>OmegaT permet d'exécuter des scripts écrits dans différents langages de script.</para>
  </section>

  <section>
    <title>Utilisation</title>

    <para>En cliquant sur <guisubmenu>Outils &gt; </guisubmenu><guisubmenu>Scripts</guisubmenu>, la fenêtre de Scripts s'ouvre :<screenshot> <screeninfo>fenêtre de Scripts</screeninfo> <mediaobject> <imageobject> <imagedata fileref="images/ScriptingDialog.png"/> </imageobject> </mediaobject> </screenshot></para>

    <para>La fenêtre de Scripts vous permet de charger un script préexistant dans la zone de texte et de l'exécuter dans le projet en cours. Pour personnaliser les caractéristiques du script, suivez les étapes ci-dessous :</para>

    <itemizedlist>
      <listitem>
        <para>Chargez un script dans le volet d'édition en cliquant sur son nom dans la liste qui apparaît dans le panneau de gauche.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Faites un clic droit sur un des boutons allant de « &lt;1&gt; » à « &lt;12&gt; » dans le panneau inférieur et sélectionnez « Ajouter ». Dans l'exemple ci-dessus, deux scripts (position 1 et 2) ont déjà été ajoutés.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Un clic gauche sur un des chiffres lance le script sélectionné correspondant. Vous pouvez lancer les macros sélectionnées soit à partir du menu principal, soit en passant par leurs entrées dans le menu <guisubmenu>Outils </guisubmenu>, soit en appuyant sur <keycap> Ctrl+Alt+F#</keycap> (# de 1 à 12).</para>
      </listitem>
    </itemizedlist>

    <para>Par défaut, les scripts sont stockés dans le dossier « scripts » situé dans le dossier d'installation d'OmegaT (le dossier contenant OmegaT.jar).</para>

    <para>Vous pouvez y ajouter de nouveaux scripts afin qu'ils apparaissent dans le liste des scripts disponibles dans la fenêtre de Scripts.</para>

    <para>Des scripts supplémentaires sont disponibles sur le site web suivant : <ulink url="https://sourceforge.net/projects/omegatscripts/">OmegaT Scripts</ulink>
    </para>
  </section>

  <section>
    <title>Langages de script</title>

    <para>Les langages de script suivants ont déjà été mis en place :</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis role="bold">Groovy</emphasis> (http://groovy.codehaus.org) : c'est un langage dynamique conçu pour la machine virtuelle de Java. Il s'appuie sur les ressources de Java mais possède de puissantes fonctions supplémentaires inspirées de langages tels que Python, Ruby et Smalltalk.</para>
        </listitem>
      </itemizedlist><itemizedlist>
        <listitem>
          <para><emphasis role="bold">JavaScript</emphasis> (parfois abrégé JS, à ne pas confondre avec Java) : c'est un langage de script à prototype, à typage dynamique et faible, avec des fonctions de première classe. C'est un langage multi-paradigme, orienté-objet, de genre impératif et fonctionnel. Étant un langage utilisé par des logiciels populaires comme Firefox, c'est un outil de programmation répandu et favorisé dans le domaine de l'open source.</para>
        </listitem>
      </itemizedlist>Tous les langages ont accès au modèle objet d'OmegaT, le projet étant l'objet principal. L'exemple de code suivant, dans le langage groovy par exemple, examine tous les segments de tous les fichiers du projet en cours et, si la traduction existe, imprime la source et la cible du segment :</para>

    <programlisting>    files = project.projectFiles;
    for (i in 0 ..&lt; files.size())
    {
        for (j in 0 ..&lt; files[i].entries.size())
        {
            currSegment = files[i].entries[j];
            if (project.getTranslationInfo(currSegment))
            {
                source = currSegment.getSrcText();
                target = project.getTranslationInfo(currSegment).translation;
                console.println(source + &quot; &gt;&gt;&gt;&gt; &quot; + target);
            }     
        }
    }</programlisting>
  </section>
</appendix>